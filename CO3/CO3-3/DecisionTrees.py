# -*- coding: utf-8 -*-
"""18/1/22-Gini.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Oc04-lAQu3Oo4a05mZgiK2W502AdJWi
"""

#Program to implement decision trees using any standard dataset available in the public domain and find the accuracy of the algorithm.
import pandas as pd
import numpy as np
from sklearn.datasets import load_iris

data

data=load_iris()
data.data.shape

print("Classes to predict",data.target_names)
print("Features",data.feature_names)

X=data.data
y=data.target

display(X.shape,y.shape)

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=50,test_size=0.25)

#Default criterion is Gini
classifier_model=DecisionTreeClassifier()
classifier_model.fit(X_train, y_train)

classifier_model_2=DecisionTreeClassifier(criterion="entropy")
classifier_model_2.fit(X_train, y_train)

classifier_model_3 = DecisionTreeClassifier(criterion= 'entropy', min_samples_split=50) 
classifier_model_3.fit(X_train, y_train)

y_pred=classifier.predict(X_test)

from sklearn.metrics import accuracy_score
print("Accuracy on train data using Gini",accuracy_score(y_train,classifier.predict(X_train)))
print("Accuracy on test data using Gini",accuracy_score(y_test,y_pred))

print('Accuracy on train data using Entropy: ', accuracy_score(y_train,classifier_model_2.predict(X_train)))
print('Accuracy on test data using Entropy: ', accuracy_score(y_test, classifier_model_2.predict(X_test)))

print('Accuracy on train data using Entropy with min_sample_split: ', accuracy_score(y_train,classifier_model_3.predict(X_train)))
print('Accuracy on test data using Entropy with min_sample_split: ', accuracy_score(y_test, classifier_model_3.predict(X_test)))

from sklearn.tree import export_graphviz #for visualization
from six import StringIO
from IPython.display import Image
import pydotplus

#Decision Tree Visualization

dot_data =  StringIO()
export_graphviz(classifier_model, out_file = dot_data, filled = True, impurity = True, rounded = True, special_characters=True, feature_names = data.feature_names, class_names = data.target_names)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())

dot_data =  StringIO()
export_graphviz(classifier_model_2, out_file = dot_data, filled = True, impurity = True, rounded = True, special_characters=True, feature_names = data.feature_names, class_names = data.target_names)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())

dot_data =  StringIO()
export_graphviz(classifier_model_3, out_file = dot_data, filled = True, impurity = True, rounded = True, special_characters=True, feature_names = data.feature_names, class_names = data.target_names)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())